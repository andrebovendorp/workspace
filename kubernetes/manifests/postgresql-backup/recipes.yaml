apiVersion: batch/v1
kind: CronJob
metadata:
  name: recipes-backup-cronjob
  namespace: postgresql-backup
spec:
  schedule: "15 11 * * *"
  successfulJobsHistoryLimit: 10
  failedJobsHistoryLimit: 10

  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: postgresql-backup
            image: ghcr.io/andrebovendorp/images/postgresql-backup:latest
            command: [ "/bin/sh", "-c" ]
            args:
            - |
              # Exit on any error
              set -e

              # Cleanup temporary files on exit
              trap "rm -rf /backup/pg_dump_* /backup/*.tar.gz /tmp/backup_list.txt" EXIT

              # Timestamp for backup
              TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')

              # 7 days ago timestamp for rotation
              SEVEN_DAYS_AGO=$(date -d "7 days ago" +%s)

              BACKUP_DIR="/backup/pg_dump_$TIMESTAMP"
              BACKUP_FILE="$POSTGRES_DB"_"$TIMESTAMP.tar.gz"

              # Create backup directory
              echo "Creating PostgreSQL backup..."
              mkdir -p "$BACKUP_DIR"

              # Perform pg_dump
              PGPASSWORD="$POSTGRES_PASSWORD" pg_dump -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -F c -d "$POSTGRES_DB" -f "$BACKUP_DIR/$BACKUP_FILE"

              # Log the size of the dump
              DUMP_SIZE=$(du -sh "$BACKUP_DIR/$BACKUP_FILE" | cut -f1)
              echo "Backup created: $BACKUP_DIR/$BACKUP_FILE (Size: $DUMP_SIZE)"

              # Upload to FTP
              echo "Uploading backup to FTP..."
              lftp -p 21 -u "$FTP_USER,$FTP_PASSWORD" "$FTP_HOST" -e "
                set ftp:ssl-allow no;
                set cmd:fail-exit yes;
                mkdir -p /backup/postgresql-cron/$POSTGRES_DB;
                cd /backup/postgresql-cron/$POSTGRES_DB;
                put /$BACKUP_DIR/$BACKUP_FILE;
                bye
              "

              echo "Backup uploaded to FTP: /backup/postgresql-cron/$POSTGRES_DB/$BACKUP_FILE"

              # Backup rotation
              echo "Performing backup rotation..."
              lftp -p 21 -u "$FTP_USER,$FTP_PASSWORD" "$FTP_HOST" -e "
                set ftp:ssl-allow no;
                set cmd:fail-exit yes;
                cd /backup/postgresql-cron/$POSTGRES_DB;
                ls -1 *.tar.gz;
                bye
              " > /tmp/backup_list.txt

              while read -r filename; do
                file_date=$(echo "$filename" | sed -E 's/.*_([0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}).*/\1/')
                file_date_unix=$(echo "$file_date" | sed 's/-/ /3; s/-/:/3; s/-/:/3')
                file_date_ts=$(date -d "$file_date_unix" +%s)

                if [ "$file_date_ts" -lt "$SEVEN_DAYS_AGO" ]; then
                  echo "Deleting old backup: $filename"
                  lftp -p 21 -u "$FTP_USER,$FTP_PASSWORD" "$FTP_HOST" -e "
                    set ftp:ssl-allow no;
                    set cmd:fail-exit yes;
                    cd /backup/postgresql-cron/;
                    rm $filename;
                    bye
                  "
                else
                  echo "Keeping backup: $filename"
                fi
              done < /tmp/backup_list.txt

              echo "PostgreSQL backup and rotation completed successfully."

            env:
            - name: POSTGRES_HOST
              value: pgsql-postgresql-hl.pgsql.svc.cluster.local
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: pgsql-backup-credentials
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgsql-backup-credentials
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              value: recipes
            - name: FTP_HOST
              value: storage.nullservers.com
            - name: FTP_USER
              value: kube
            - name: FTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgsql-backup-credentials
                  key: FTP_PASSWORD

          restartPolicy: OnFailure
