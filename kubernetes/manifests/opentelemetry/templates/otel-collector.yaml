apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: agent
  namespace: {{ .Release.Namespace }}
spec:
  resources:
    requests:
      memory: 500Mi
      cpu: 500m
    limits:
      memory: 2Gi
  ports:
    - name: metrics
      port: 8888
    - port: 4317
      appProtocol: otlp
      name: grpc
    - port: 4318
      appProtocol: otlp
      name: http
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  volumes:
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: varlibotelcol
      hostPath:
        path: /var/lib/otelcol
        type: DirectoryOrCreate
  volumeMounts:
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: varlibotelcol
      mountPath: /var/lib/otelcol
  podSecurityContext:
    runAsUser: 0
    runAsGroup: 0
  config:
    extensions:
      health_check:
        endpoint: 0.0.0.0:13134
      file_storage:
        directory: /var/lib/otelcol
    receivers:
      filelog:
        encoding: utf-8
        fingerprint_size: 1kb
        force_flush_period: "0"
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        max_concurrent_files: 1024
        max_log_size: 1MiB
        operators:
        - id: container-parser
          max_log_size: 102400
          type: container
        - id: format-router
          type: router
          routes:
            - output: json-parser
              expr: 'body matches "^{.*}$"'
          default: noop
        - id: json-parser
          type: json_parser
          parse_to: body
          output: severity-level
        - id: severity-level
          type: severity_parser
          if: 'body?.level != nil'
          parse_from: body.level
        poll_interval: 200ms
        retry_on_failure:
          enabled: true
        start_at: end
        storage: file_storage
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      kubeletstats:
        collection_interval: 60s
        auth_type: "serviceAccount"
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
        extra_metadata_labels:
        - container.id
        - container.image.name
        - pod.name
        - pod.namespace
        metric_groups:
        - container
        - pod
        - node
      hostmetrics:
        collection_interval: 60s
        scrapers:
          cpu: null
          disk: null
          filesystem: null
          load: null
          memory: null
          network: null
          paging: null
          processes: null
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      k8sattributes:
        filter:
          node_from_env_var: ${K8S_NODE_NAME}
        extract:
          metadata:
            - k8s.daemonset.name
            - k8s.deployment.name
            - k8s.job.name
            - k8s.statefulset.name
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - container.id
            - container.image.name
            - container.image.tag
          labels:
            - tag_name: service.namespace
              key: kubernetes.io/metadata.name
              from: namespace
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: connection
      resource/remove-attributes:
        attributes:
          - pattern: ^os.*
            action: delete
          - pattern: ^telemetry.*
            action: delete
          - pattern: k8s.pod.start_time
            action: delete
          - pattern: k8s.pod.ip
            action: delete
          - pattern: k8s.pod.uid
            action: delete
      resource/common:
        attributes:
          - key: k8s.cluster.name
            value: homeserver
            action: upsert
          - key: k8s.node.name
            value: ${K8S_NODE_NAME}
            action: upsert
          - key: host.name
            value: ${K8S_NODE_NAME}
            action: upsert
      resourcedetection:
        detectors:
        - env
        - system
        override: true
        timeout: 15s
      resource/logs:
        attributes:
        - key: log.type
          action: upsert
          value: container
      transform/log-level:
        error_mode: ignore
        log_statements:
          - conditions:
            - severity_text != ""
            context: log
            statements:
            - set(attributes["level"], severity_text)
      transform/toggle-export:
        error_mode: ignore
        log_statements:
          - conditions:
            - attributes["k8s.daemonset.name"] == "cilium"
            - attributes["k8s.deployment.name"] == "cilium-operator"
            context: resource
            statements:
            - set(attributes["export-logs"], true)
    exporters:
      debug:
        verbosity: basic
      otlphttp/loki:
        endpoint: http://loki.loki.svc.cluster.local:3100/otlp/
        tls:
          insecure: true
      otlphttp/victoria-logs:
        endpoint: "http://victoria-metrics-victoria-logs-single-server.victoria-metrics.svc.cluster.local:9428/insert/opentelemetry"
        tls:
          insecure: true
    service:
      extensions:
        - health_check
        - file_storage
      pipelines:
        logs/filelog:
          exporters:
          - debug
          - otlphttp/loki
          - otlphttp/victoria-logs
          processors:
          - memory_limiter
          - k8sattributes
          - resourcedetection
          - resource/common
          - transform/toggle-export
          - transform/log-level
          - resource/logs
          - batch
          receivers:
          - filelog
  mode: daemonset
